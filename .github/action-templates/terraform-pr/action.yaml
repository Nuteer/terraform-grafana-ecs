name: 'Terraform PR Validator'
description: 'Makes Terraform plans and comment on PR'
inputs:
  tf-workspace:  # id of input
    description: 'Terraform workspace'
    required: true
    default: 'dev'
runs:
  using: "composite"
  steps:

    - name: Early exit
      if: ${{github.ref == 'refs/heads/main' && github.event_name == 'push' && inputs.tf-workspace != 'dev'}}
      run: |
        echo "${{github.ref == 'refs/heads/main' && github.event_name == 'push' && inputs.tf-workspace != 'dev' }}"
        echo "This can run on main only for dev" && exit 1
      shell: bash

    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Node
      uses: actions/setup-node@v2
      with:
        node-version: 14

    - name: Install tfsec and tflint
      shell: bash
      run: |
        curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
        curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

    - name: Setup terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      working-directory: ./terraform
      shell: bash
      id: init
      run: terraform init

    - name: Workspace selection - ${{ inputs.tf-workspace }}
      working-directory: ./terraform
      shell: bash
      run: terraform workspace select $TERRAFORM_WORKSPACE || terraform workspace new $TERRAFORM_WORKSPACE
      env:
        TERRAFORM_WORKSPACE: ${{ inputs.tf-workspace }}

    - name: Terraform Format
      working-directory: ./terraform
      shell: bash
      id: fmt
      run: terraform fmt -check

    - name: Terraform Validate
      working-directory: ./terraform
      shell: bash
      id: validate
      run: terraform validate -no-color

    - name: TFSec
      working-directory: ./terraform
      shell: bash
      id: tfsec
      run: tfsec .
      continue-on-error: true

    - name: tflint
      id: tflint
      run: tflint --no-color .
      working-directory: ./terraform
      shell: bash
      continue-on-error: true

    - name: Terraform Plan
      working-directory: ./terraform
      shell: bash
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color -input=false -var-file=tfvars/${{ inputs.tf-workspace }}.tfvars
      continue-on-error: true

    - name: Echo plan to output file
      run: echo "${{ steps.plan.outputs.stdout }}" > plan.out
      shell: bash
      if: github.event_name == 'pull_request'

    # I will need to leave this one out as it uses a docker image and our agents do not have docker.
    # - name: Render terraform docs and push changes back to PR
    #   uses: terraform-docs/gh-actions@main
    #   with:
    #     working-dir: .
    #     output-file: README.md
    #     output-method: inject
    #     git-push: "true"
    #   continue-on-error: true


    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ github.token }}
        script: |
          const { readFile } = require("fs/promises");
          const plan_output = await readFile('plan.out');
          const plan = "terraform\n" + plan_output.length > 64000 ? `${plan_output.slice(0,64000)}...` : plan_output;
          const output = `
          ### Workspace: ${{ inputs.tf-workspace }}
          #### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
          #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
          #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
          #### Terraform Linter 🤖\`${{ steps.tflint.outcome }}\`
          #### TFsec 🤖\`${{ steps.tfsec.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${plan}
          \`\`\

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      shell: bash
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply only if dev
      working-directory: ./terraform
      shell: bash
      if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' && inputs.tf-workspace == 'dev' }}
      run: terraform apply -auto-approve -input=false -var-file=./tfvars/${{ inputs.tf-workspace }}.tfvars
